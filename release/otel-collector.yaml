apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: [""]
    resources: ["nodes/stats", "nodes/proxy", "pods", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: observability
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  namespace: observability
  labels:
    app: otel-collector
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      kubeletstats:
        auth_type: serviceAccount
        endpoint: ${env:K8S_NODE_NAME}:10250
        insecure_skip_verify: true

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.namespace.name
            - k8s.node.name
            - k8s.container.name

    exporters:
      debug:
      # Jaeger exporter for visualization
      otlp:
        endpoint: jaeger-collector.istio-system:4317
        tls:
          insecure: true
      file/metrics:
        path: /data/metrics.jsonl
      file/logs:
        path: /data/logs.jsonl
      file/traces:
        path: /data/traces.jsonl

    extensions:
      health_check:
        endpoint: localhost:13133
    service:
      extensions:
        - health_check
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [file/traces, otlp]
        metrics:
          receivers: [kubeletstats]
          processors: [batch, k8sattributes]
          exporters: [file/metrics]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [file/logs, debug]
---
# --- Kubernetes Workload ---
# This section defines how the Collector is deployed to the cluster.

# A DaemonSet ensures that one Collector pod runs on every node in the cluster.
# This is necessary because the kubeletstatsreceiver must connect to the Kubelet
# on each individual node.
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: otel-collector
  namespace: observability
  labels:
    app: otel-collector
spec:
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:latest
          command: ["/otelcol-contrib", "--config=/conf/otel-collector-config.yaml"]
          securityContext:
            runAsUser: 0
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: health
              containerPort: 13133
          volumeMounts:
            - name: otel-collector-config
              mountPath: /conf
            - name: data
              mountPath: /data
        - name: debug-shell
          image: busybox:1.35.0
          command:
            - /bin/sh
            - -c
            - sleep infinity
          volumeMounts:
          - name: data
            mountPath: /data
      volumes:
        - name: otel-collector-config
          configMap:
            name: otel-collector-conf
        - name: data
          hostPath:
            path: /var/lib/otel-collector-data
            type: DirectoryOrCreate
